
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000021c  00000290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aae  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e7  00000000  00000000  00000e42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000423  00000000  00000000  00001529  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  0000194c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000394  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000449  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000221d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  7a:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_send_command>:
}

void lcd_out(unsigned char x, unsigned char y, char *str){
	lcd_set_curser(x, y);       // set cursor at position (x, y)
	lcd_send_string(str);       // start writing the string form that position 
}
  82:	8b bb       	out	0x1b, r24	; 27
  84:	c1 98       	cbi	0x18, 1	; 24
  86:	c2 98       	cbi	0x18, 2	; 24
  88:	c0 98       	cbi	0x18, 0	; 24
  8a:	00 00       	nop
  8c:	c0 9a       	sbi	0x18, 0	; 24
  8e:	00 00       	nop
  90:	87 ea       	ldi	r24, 0xA7	; 167
  92:	91 e6       	ldi	r25, 0x61	; 97
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <lcd_send_command+0x12>
  98:	00 c0       	rjmp	.+0      	; 0x9a <lcd_send_command+0x18>
  9a:	00 00       	nop
  9c:	08 95       	ret

0000009e <lcd_Init>:
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a bb       	out	0x1a, r24	; 26
  a2:	18 ba       	out	0x18, r1	; 24
  a4:	b8 9a       	sbi	0x17, 0	; 23
  a6:	b9 9a       	sbi	0x17, 1	; 23
  a8:	ba 9a       	sbi	0x17, 2	; 23
  aa:	c0 9a       	sbi	0x18, 0	; 24
  ac:	88 e3       	ldi	r24, 0x38	; 56
  ae:	0e 94 41 00 	call	0x82	; 0x82 <lcd_send_command>
  b2:	8c e0       	ldi	r24, 0x0C	; 12
  b4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_send_command>
  b8:	08 95       	ret

000000ba <lcd_send_data>:
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	c1 98       	cbi	0x18, 1	; 24
  be:	c2 9a       	sbi	0x18, 2	; 24
  c0:	c0 98       	cbi	0x18, 0	; 24
  c2:	00 00       	nop
  c4:	c0 9a       	sbi	0x18, 0	; 24
  c6:	00 00       	nop
  c8:	87 ea       	ldi	r24, 0xA7	; 167
  ca:	91 e6       	ldi	r25, 0x61	; 97
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_send_data+0x12>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_send_data+0x18>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <lcd_send_string>:
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	ec 01       	movw	r28, r24
  dc:	88 81       	ld	r24, Y
  de:	88 23       	and	r24, r24
  e0:	31 f0       	breq	.+12     	; 0xee <lcd_send_string+0x18>
  e2:	21 96       	adiw	r28, 0x01	; 1
  e4:	0e 94 5d 00 	call	0xba	; 0xba <lcd_send_data>
  e8:	89 91       	ld	r24, Y+
  ea:	81 11       	cpse	r24, r1
  ec:	fb cf       	rjmp	.-10     	; 0xe4 <lcd_send_string+0xe>
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	08 95       	ret

000000f4 <lcd_set_curser>:
  f4:	61 11       	cpse	r22, r1
  f6:	04 c0       	rjmp	.+8      	; 0x100 <lcd_set_curser+0xc>
  f8:	80 58       	subi	r24, 0x80	; 128
  fa:	0e 94 41 00 	call	0x82	; 0x82 <lcd_send_command>
  fe:	08 95       	ret
 100:	80 54       	subi	r24, 0x40	; 64
 102:	0e 94 41 00 	call	0x82	; 0x82 <lcd_send_command>
 106:	08 95       	ret

00000108 <lcd_convert_data>:

void lcd_convert_data(unsigned int var){
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	61 97       	sbiw	r28, 0x11	; 17
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
 124:	ac 01       	movw	r20, r24
	
    int i ;
    char number[17];
	unsigned char enter = 0;
	
	while(var!=0)
 126:	89 2b       	or	r24, r25
 128:	a1 f1       	breq	.+104    	; 0x192 <lcd_convert_data+0x8a>
 12a:	f1 2c       	mov	r15, r1
	{
	  number[enter++] = (var%10) + 48 ;
 12c:	0f 2d       	mov	r16, r15
 12e:	10 e0       	ldi	r17, 0x00	; 0
 130:	e1 e0       	ldi	r30, 0x01	; 1
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ec 0f       	add	r30, r28
 136:	fd 1f       	adc	r31, r29
 138:	e0 0f       	add	r30, r16
 13a:	f1 1f       	adc	r31, r17
 13c:	9a 01       	movw	r18, r20
 13e:	ad ec       	ldi	r26, 0xCD	; 205
 140:	bc ec       	ldi	r27, 0xCC	; 204
 142:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__umulhisi3>
 146:	96 95       	lsr	r25
 148:	87 95       	ror	r24
 14a:	96 95       	lsr	r25
 14c:	87 95       	ror	r24
 14e:	96 95       	lsr	r25
 150:	87 95       	ror	r24
 152:	9c 01       	movw	r18, r24
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	82 0f       	add	r24, r18
 166:	93 1f       	adc	r25, r19
 168:	9a 01       	movw	r18, r20
 16a:	28 1b       	sub	r18, r24
 16c:	39 0b       	sbc	r19, r25
 16e:	c9 01       	movw	r24, r18
 170:	80 5d       	subi	r24, 0xD0	; 208
 172:	80 83       	st	Z, r24
	  var = var/10 ;	
 174:	9a 01       	movw	r18, r20
 176:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__umulhisi3>
 17a:	ac 01       	movw	r20, r24
 17c:	56 95       	lsr	r21
 17e:	47 95       	ror	r20
 180:	56 95       	lsr	r21
 182:	47 95       	ror	r20
 184:	56 95       	lsr	r21
 186:	47 95       	ror	r20
    char number[17];
	unsigned char enter = 0;
	
	while(var!=0)
	{
	  number[enter++] = (var%10) + 48 ;
 188:	f3 94       	inc	r15
	
    int i ;
    char number[17];
	unsigned char enter = 0;
	
	while(var!=0)
 18a:	41 15       	cp	r20, r1
 18c:	51 05       	cpc	r21, r1
 18e:	71 f6       	brne	.-100    	; 0x12c <lcd_convert_data+0x24>
 190:	02 c0       	rjmp	.+4      	; 0x196 <lcd_convert_data+0x8e>
	  number[enter++] = (var%10) + 48 ;
	  var = var/10 ;	
	}
	
	enter--;
	for(i=enter ;i>=0;i--)
 192:	0f ef       	ldi	r16, 0xFF	; 255
 194:	10 e0       	ldi	r17, 0x00	; 0
 196:	ce 01       	movw	r24, r28
 198:	80 0f       	add	r24, r16
 19a:	91 1f       	adc	r25, r17
 19c:	fc 01       	movw	r30, r24
 19e:	32 96       	adiw	r30, 0x02	; 2
 1a0:	7f 01       	movw	r14, r30
	{
		lcd_send_data(number[i]); 
 1a2:	f7 01       	movw	r30, r14
 1a4:	82 91       	ld	r24, -Z
 1a6:	7f 01       	movw	r14, r30
 1a8:	0e 94 5d 00 	call	0xba	; 0xba <lcd_send_data>
	  number[enter++] = (var%10) + 48 ;
	  var = var/10 ;	
	}
	
	enter--;
	for(i=enter ;i>=0;i--)
 1ac:	01 50       	subi	r16, 0x01	; 1
 1ae:	11 09       	sbc	r17, r1
 1b0:	c2 f7       	brpl	.-16     	; 0x1a2 <lcd_convert_data+0x9a>
	{
		lcd_send_data(number[i]); 
	}
}
 1b2:	61 96       	adiw	r28, 0x11	; 17
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	de bf       	out	0x3e, r29	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	cd bf       	out	0x3d, r28	; 61
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	0f 91       	pop	r16
 1c6:	ff 90       	pop	r15
 1c8:	ef 90       	pop	r14
 1ca:	08 95       	ret

000001cc <main>:
#include "LCD.h"


int main(void)
{
    lcd_Init();
 1cc:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_Init>
    while (1) 
    {
      lcd_send_string("hello world ");
 1d0:	80 e6       	ldi	r24, 0x60	; 96
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_string>
	  lcd_convert_data(2000+20);
 1d8:	84 ee       	ldi	r24, 0xE4	; 228
 1da:	97 e0       	ldi	r25, 0x07	; 7
 1dc:	0e 94 84 00 	call	0x108	; 0x108 <lcd_convert_data>
	  lcd_set_curser(0, 1);
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_set_curser>
	  lcd_send_string("hope you're good");
 1e8:	8d e6       	ldi	r24, 0x6D	; 109
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_send_string>
	  lcd_set_curser(0,0);
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_set_curser>
 1f8:	eb cf       	rjmp	.-42     	; 0x1d0 <main+0x4>

000001fa <__umulhisi3>:
 1fa:	a2 9f       	mul	r26, r18
 1fc:	b0 01       	movw	r22, r0
 1fe:	b3 9f       	mul	r27, r19
 200:	c0 01       	movw	r24, r0
 202:	a3 9f       	mul	r26, r19
 204:	70 0d       	add	r23, r0
 206:	81 1d       	adc	r24, r1
 208:	11 24       	eor	r1, r1
 20a:	91 1d       	adc	r25, r1
 20c:	b2 9f       	mul	r27, r18
 20e:	70 0d       	add	r23, r0
 210:	81 1d       	adc	r24, r1
 212:	11 24       	eor	r1, r1
 214:	91 1d       	adc	r25, r1
 216:	08 95       	ret

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
